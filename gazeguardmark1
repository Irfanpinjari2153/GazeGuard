{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1YCzH6XcDiMJreiRK3ZaMo7p_3z1zpQ25","authorship_tag":"ABX9TyN9pyznoQcFH6cCsZvYf4Qi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install opencv-python\n","!pip install pandas\n","!pip install openpyxl\n","!pip install pillow\n","!pip install numpy\n","!pip install scikit-learn\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dIr78YntLFL_","executionInfo":{"status":"ok","timestamp":1722677062102,"user_tz":420,"elapsed":21758,"user":{"displayName":"Irfan Pinjari","userId":"07114543439280667330"}},"outputId":"a635abaf-a12e-49a0-9787-c70c97b7601c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.10.0.84)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python) (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\n","Requirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.1.5)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (1.1.0)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (9.4.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n","Requirement already satisfied: numpy<2.0,>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.26.4)\n","Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n"]}]},{"cell_type":"code","source":["import cv2\n","import numpy as np\n","\n","# Your dataset: list of face images, where each image is read using cv2.imread() or similar\n","# Make sure the file paths are correct and the images exist\n","dataset = [cv2.imread(\"/content/Irfan.jpeg\", cv2.IMREAD_GRAYSCALE),\n","           cv2.imread(\"/content/alfiya.jpeg\", cv2.IMREAD_GRAYSCALE)]\n","# Check if images were loaded correctly\n","for i, img in enumerate(dataset):\n","    if img is None:\n","        print(f\"Failed to load image {i+1}\")\n","\n","# Corresponding labels: list of labels, where each label is an integer\n","labels = [1, 2]\n","\n","# Initialize the face recognizer\n","recognizer = cv2.face.LBPHFaceRecognizer_create()\n","\n","# Train the model if all images were loaded successfully\n","if all(img is not None for img in dataset):\n","    recognizer.train(dataset, np.array(labels))\n","\n","    # Save the trained model\n","    recognizer.save('model.yml')\n","else:\n","    print(\"Model training skipped due to image loading errors.\")"],"metadata":{"id":"zx4yIY_rSUmk","executionInfo":{"status":"ok","timestamp":1722677067903,"user_tz":420,"elapsed":480,"user":{"displayName":"Irfan Pinjari","userId":"07114543439280667330"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"7b9672c9-ed1f-471a-dcd8-31df35a8fcd6"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Failed to load image 1\n","Failed to load image 2\n","Model training skipped due to image loading errors.\n"]}]},{"cell_type":"code","source":["import cv2\n","import pandas as pd\n","from openpyxl import load_workbook\n","import smtplib\n","from email.mime.multipart import MIMEMultipart\n","from email.mime.text import MIMEText\n","from email.mime.application import MIMEApplication\n","import numpy as np\n","from sklearn.metrics.pairwise import cosine_similarity\n","from PIL import Image\n","import datetime\n","\n","# Load the pre-trained face recognition model\n","face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n","recognizer = cv2.face.LBPHFaceRecognizer_create()\n","recognizer.read('model.yml')\n","\n","# Verify the file path and ensure 'dataset.xlsx' exists\n","file_path = 'dataset.xlsx'  # Update with the correct path if necessary\n","try:\n","    # Load the dataset\n","    dataset = pd.read_excel(file_path, engine='openpyxl')\n","    print(\"Dataset loaded successfully.\")  # Confirmation message\n","except FileNotFoundError:\n","    print(f\"File not found: {file_path}. Please check the file path.\")\n","    # Handle the error appropriately, e.g., exit the program or prompt for a valid path\n","    # For this example, we will create a sample dataset if the file is not found\n","    dataset = pd.DataFrame(columns=['Name']) # Create an empty dataframe with a 'Name' column\n","    dataset.to_excel(file_path, index=False, engine='openpyxl') # Save the empty dataframe to an Excel file\n","\n","# Function to capture an image from the camera\n","def capture_image():\n","    camera = cv2.VideoCapture(0)\n","    ret, frame = camera.read()\n","    if ret:\n","        cv2.imshow(\"Capture\", frame)\n","        cv2.waitKey(0)\n","        cv2.destroyAllWindows()\n","        camera.release()\n","        return frame\n","    else:\n","        print(\"Could not access the camera.\")\n","        return None\n","\n","# Function to perform facial recognition\n","def recognize_face(image):\n","    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n","    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n","\n","    if len(faces) == 0:\n","        print(\"No face detected.\")\n","        return None\n","\n","    for (x, y, w, h) in faces:\n","        roi_gray = gray[y:y+h, x:x+w]\n","        roi_color = image[y:y+h, x:x+w]\n","        label, confidence = recognizer.predict(roi_gray)\n","\n","        # Check if the confidence is below a certain threshold\n","        if confidence < 50:\n","            return label\n","        else:\n","            print(\"Unknown face.\")\n","            return None\n","\n","# Function to mark attendance in Excel sheet\n","def mark_attendance(label):\n","    today = pd.to_datetime('today').strftime('%Y-%m-%d')\n","    if today not in dataset.columns:\n","        dataset[today] = np.nan\n","\n","    # Check if label exists in the dataset\n","    if label in dataset['Name'].values:\n","        dataset.loc[dataset['Name'] == label, today] = 'Present'\n","    else:\n","        print(f\"Label {label} not found in dataset.\")\n","\n","    # Save the updated dataset\n","    dataset.to_excel(file_path, index=False, engine='openpyxl')\n","\n","    print(\"Attendance marked for label:\", label)\n","\n","# Function to send the attendance sheet through email\n","def send_email():\n","    from_addr = 'your_email@example.com'  # Replace with your actual email address\n","    to_addr = 'recipient@example.com'  # Replace with the recipient's email address\n","    password = 'your_email_password'  # Replace with your actual email password or app-specific password\n","    msg = MIMEMultipart()\n","    msg['From'] = from_addr\n","    msg['To'] = to_addr\n","    msg['Subject'] = 'Attendance Sheet'\n","\n","    body = 'Please find attached the attendance sheet.'\n","    msg.attach(MIMEText(body, 'plain'))\n","\n","    # Attach the Excel file\n","    with open(file_path, 'rb') as f:\n","        attachment = MIMEApplication(f.read(), _subtype=\"xlsx\")\n","        attachment.add_header('Content-Disposition', 'attachment', filename='dataset.xlsx')\n","        msg.attach(attachment)\n","\n","    server = smtplib.SMTP('smtp.gmail.com', 587)\n","    server.starttls()\n","\n","    # Handle potential authentication errors\n","    try:\n","        server.login(from_addr, password)\n","        text = msg.as_string()\n","        server.sendmail(from_addr, to_addr, text)\n","        print(\"Email sent successfully!\")  # Confirmation message\n","    except smtplib.SMTPAuthenticationError as e:\n","        print(\"Authentication error:\", e)  # Print the error message\n","    finally:\n","        server.quit()\n","\n","# Example usage:\n","frame = capture_image()\n","if frame is not None:\n","    label = recognize_face(frame)\n","    if label is not None:\n","        mark_attendance(label)\n","        send_email()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"Le-PM6YZd2D8","executionInfo":{"status":"error","timestamp":1722677081712,"user_tz":420,"elapsed":520,"user":{"displayName":"Irfan Pinjari","userId":"07114543439280667330"}},"outputId":"b4786e8f-0a1c-4600-db6a-135acff9d03e"},"execution_count":4,"outputs":[{"output_type":"error","ename":"error","evalue":"OpenCV(4.10.0) /io/opencv_contrib/modules/face/src/facerec.cpp:61: error: (-2:Unspecified error) File can't be opened for reading! in function 'read'\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-73432a71674f>\u001b[0m in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mface_cascade\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCascadeClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhaarcascades\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'haarcascade_frontalface_default.xml'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mrecognizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mface\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLBPHFaceRecognizer_create\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mrecognizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'model.yml'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m# Verify the file path and ensure 'dataset.xlsx' exists\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31merror\u001b[0m: OpenCV(4.10.0) /io/opencv_contrib/modules/face/src/facerec.cpp:61: error: (-2:Unspecified error) File can't be opened for reading! in function 'read'\n"]}]}]}
